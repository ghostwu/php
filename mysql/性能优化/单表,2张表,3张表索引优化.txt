CREATE TABLE `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `author_id` int(10) unsigned NOT NULL,
  `category_id` int(10) unsigned NOT NULL,
  `views` int(10) unsigned NOT NULL,
  `comments` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8

INSERT INTO article( author_id, category_id, views, comments, title, content ) VALUES (
1, 1, 1, 1, '1', '1' ),( 2, 2, 2, 2, '2', '2' ), ( 3, 1, 1, '3', 3, '3' );

一，单表索引优化

1，查找category_id为1, 并且comments大于1的情况下，views最多的article_id
select id, author_id from article where category_id = 1 and comments > 1
order by views desc limit 1

explain性能很差：type: all,  extra: using filesort

优化一：
创建联合索引:
create index idx_article_ccv on article( category_id, comments, views );
删除索引
drop index idx_article_ccv on article

建立索引之后，扫描类型(type)变成range, key用到了索引
explain select id, author_id from article where category_id = 1 and comments > 1 order by views desc limit 1
最左匹配原则( comments > 1 ) 之后, order by后面的索引失效，所以mysql用using filesort排序

explain select id, author_id from article where category_id = 1 and comments = 1 order by views desc limit 1
最左匹配原则( comments = 1 ) 之后, order by后面的索引生效

优化二:
create index idx_cv on article( category_id, views ). 绕过comments

再次EXPLAIN SELECT id, author_id FROM article WHERE category_id = 1 AND comments > 1
ORDER BY views DESC LIMIT 1
type: range, extra: using where 没有using filesort. 性能提高

二、两表优化
CREATE TABLE `class` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `card` int(10) unsigned NOT NULL,  #分类id
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8

CREATE TABLE `book` (
  `bookid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `card` int(10) unsigned NOT NULL,
  PRIMARY KEY (`bookid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8

insert into class( card ) values ( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )

insert into book( card ) values ( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )


EXPLAIN SELECT * FROM class c LEFT JOIN book b ON c.`card` = b.`card`
结论: type:all
1，验证1
#book表添加索引, 索引名字为y, 索引字段为card
添加索引: alter table book add index y( card )

.LEFT JOIN / RIGHT JOIN
	左右关联的时候，索引加在反向表上才有用, 因为LEFT的结果取决于右表, RIGHT的结果取决于左表

	>左关联: 加在右表上
	>右关联: 加在左表上

三表索引优化:
CREATE TABLE `phone` (
  `phoneid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `card` int(10) unsigned NOT NULL,
  PRIMARY KEY (`phoneid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
insert into phone( card ) values ( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )
,( floor( 1 + ( rand() * 20 ) ) )


select * from class left join book
on class.card = book.card
left join phone
on book.card = phone.card

优化
CREATE INDEX Y ON book( card );
CREATE INDEX Y ON phone( card );